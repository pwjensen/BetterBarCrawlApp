openapi: 3.0.2
info:
  title: 'Better Bar Crawl App Backend'
  version: '0.2.0'
  description: 'These are the super cool and fancy API docs for the backend. The main thing to understand here is the auth flow. A client logs in by making a call to /api/auth/login/ using HTTP basic authentication. This will respond with a token to be used for all protected endpoints.'
servers:
  - url: 'http://127.0.0.1:8000'
    description: Local Django dev server
paths:
  /api/search/:
    get:
      operationId: searchBars
      security:
        - tokenAuth: []
      description: 'Search for bars near a location'
      parameters:
        - in: query
          name: longitude
          schema:
            type:
              number
          description: 'Longitude of search location'
          required: true
        - in: query
          name: latitude
          schema:
            type:
              number
          description: 'Latitude of search location'
          required: true
        - in: query
          name: radius
          schema:
            type:
              integer
          description: 'Radius around search location to search for bars in miles (default = 10)'
        - in: query
          name: type
          schema:
            type:
              string
          description: 'Type of establishment to search for. (default = bar)'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  locations:
                    type: array
                    description: 'List of found locations'
                    items:
                      type: object
                      properties:
                        name:
                          type:
                            string
                        address:
                          type:
                            string
                        latitude:
                          type:
                            number
                        longitude:
                          type:
                            number
                        rating:
                          type:
                            string
                        user_ratings_total:
                          type:
                            integer
                        place_id:
                          type:
                            string
                  search_params:
                    type: object
                    properties: 
                      longitude:
                        type:
                          number
                      latitude:
                        type:
                          number
                      radius:
                        type:
                          integer
                      type:
                        type:
                          string
                  total_locations:
                    type:
                      integer
          description: 'Default response object for list of bars'
  /api/user/:
    get:
      operationId: retrieveUser
      security: 
        - tokenAuth: []
      description: 'Get user information about the current user. This uses the auth token to determine the user.'
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: 'User object of signed in user'
      tags:
      - user
    post:
      operationId: createUser
      security: []
      description: 'Create a new user'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: 'Returns the created User object'
        '400':
          content:
            application/json:
              schema:
                {}
          description: "Username is taken, email is already used, or passwords don't match. A property will be present called 'username', 'email', and 'password' for those errors respectively."
      tags:
      - user
    delete:
      operationId: destroyUser
      security: 
        - tokenAuth: []
      description: 'Delete a user account'
      parameters: []
      responses:
        '204':
          description: 'No Content, user deleted'
      tags:
      - user
  /api/auth/login/:
    post:
      operationId: login
      security: 
        - basicAuth: []
      description: 'Login to a user account using HTTP basic auth.'
      parameters: []
      responses:
        '201':
          content:
            application/json:
              schema: 
                type: object
                properties: 
                  expiry:
                    type: string
                    format: date-time
                  token:
                    type: string
                    description: 'auth token'
                    example: 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
          description: 'Returns auth code for future requests. Token is valid for 24 hours (subject to change).'
      tags:
      - auth
  /api/auth/logout/:
    post:
      operationId: logout
      security: 
        - tokenAuth: []
      description: 'Log out of a user account. In practice, this invalidates the given auth token'
      responses:
        '201':
          description: 'User successfully logged out'
      tags:
      - auth
  /api/auth/logoutall/:
    post:
      operationId: logoutAll
      security: 
        - tokenAuth: []
      description: 'Log the user out of all sessions. In practice, this invalidates all tokens for the current user.'
      responses:
        '201':
          description: 'User successfully logged out of all sessions'
      tags:
      - auth
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Enter your token in the format **Token &lt;token>**
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+\z
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - username
      example: 
        username: JohnnyBoy
        email: johndoe@example.com
        first_name: John
        last_name: Doe
      description: 'Represents the generic User model'
    Register:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+\z
          maxLength: 150
        password:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
        email:
          type: string
          format: email
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - username
      - password
      - password2
      - email
      - first_name
      - last_name
      example:
        username: JohnnyBoy
        password: ILoveCornDogs!
        password2: ILoveCornDogs!
        email: johndoe@example.com
        first_name: John
        last_name: Doe
      description: 'Used for creating a new user account'
